##
# @file
#
# Makefile for the Demo C++ Framework project
#     - Open Watcom C++ compiler (definitions).
#
# @author Emil Maskovsky
#


############################
#     Compiler options     #
############################

# Suffix of object file names.
# (cannot be empty)
OBJ_SFX := obj


# C++ compiler settings.

# The compiler executable.
CXX := wpp386

# The compiler global flags.
# (used standardized name CXXFLAGS, which can be
# overridden on the make command line)
CXXFLAGS := -zq $(CXXFLAGS_TARGET) -xs -xr

# Output name flag.
CXX_OUT := -fo
# Compile-only flag.
CXX_COMPILE_ONLY :=
# Macro definition flag.
CXX_DEFINE := -d
# Include directory flag.
CXX_INCLUDE := -i

# Flags for different build configurations.
CXXFLAGS_DEBUG := -od -d2 -db -wx -ew
CXXFLAGS_RELEASE := -ox -d0 -w0
CXXFLAGS_LIB := -bc
CXXFLAGS_LIBMT := -bc $(CFLAGS_MT)
CXXFLAGS_DLL := $(CFLAGS_MT)
CXXFLAGS_DLL_DLL := -bd
CXXFLAGS_DLL_EXE := -bc


# Resource compiler settings.

# The compiler executable.
RC := wrc

# Suffix of compiled resource files.
# (cannot be empty, if RC defined)
RES_SFX := res

# The compiler global flags.
# (used standardized name RCFLAGS, which can be
# overridden on the make command line)
RCFLAGS := -q -r $(RCFLAGS_TARGET)

# Output name flag.
RC_OUT := -fo

# Macro definition flag.
RC_DEFINE := -D
# Include directory flag.
RC_INCLUDE := -i

# Flags for different build configurations.
RCFLAGS_DEBUG := -p
RCFLAGS_RELEASE :=


##########################
#     Linker options     #
##########################

# The linker global flags.
# (used standardized name LDFLAGS, which can be
# overridden on the make command line)
LDFLAGS := option quiet

# Suffix of object libraries.
# (cannot be empty)
LIB_SFX := lib


# C++ linker settings.

# The linker executable.
LNKC := wlink

# The linker global flags.
# (includes standard name LDFLAGS, which can be
# overridden on the make command line)
LNKC_FLAGS := $(LDFLAGS)

LNKC_OBJ := file 
LNKC_RES := option resource=
# Output name flag.
LNKC_OUT := name 

# Flags for different build configurations.
LNKC_FLAGS_DEBUG := debug watcom all
LNKC_FLAGS_RELEASE := option eliminate

LNKC_LIB_PFX := library 
LNKC_LIB_SFX :=


# C++ librarian compiler settings.

# The librarian executable.
LIBC := wlib

# The librarian global flags.
LIBC_FLAGS := -q -b -n

# Output name flag.
LIBC_OUT :=


# C++ dynamic library linker settings.

# The linker executable.
DLLC := $(LNKC)

# The linker global flags.
# (includes standard name LDFLAGS, which can be
# overridden on the make command line)
DLLC_FLAGS := $(LDFLAGS) option implib

DLLC_OBJ := $(LNKC_OBJ)
DLLC_RES := $(LNKC_RES)
# Output name flag.
DLLC_OUT := $(LNKC_OUT)

# Flags for different build configurations.
DLLC_FLAGS_DEBUG := $(LNKC_FLAGS_DEBUG)
DLLC_FLAGS_RELEASE := $(LNKC_FLAGS_RELEASE)

# Tool for creating the import library from the DLL.
#DLLC_IMPLIB := $(LIBC)
#DLLC_IMPLIB_FLAGS := $(LIBC_FLAGS)
#DLLC_IMPLIB_OUT := $(LIBC_OUT)


# Addditional clean masks for 'clean...' targets.
MXCPP_CLEAN_MASK = *.err
MXCPP_CLEAN_MASK_DEBUG = $(1)*.mbr
MXCPP_CLEAN_MASK_TEST = 
MXCPP_CLEAN_MASK_TEST_DEBUG = $(1)*.mbr

# Addditional clean masks for 'cleanall...' targets.
MXCPP_CLEANALL_MASK_DLL = $(2:.dll=.lib)
MXCPP_CLEANALL_MASK_DLL_DEBUG = 

# EOF #

##
# @file
#
# Makefile for the Demo C++ Framework project
#     - Digital Mars (DMC) compiler (definitions).
#
# @author Emil Maskovsky
#


############################
#     Compiler options     #
############################

# Suffix of object file names.
# (cannot be empty)
OBJ_SFX := obj


# ANSI-C compiler settings.

# The compiler executable.
CC := dmc

# The compiler global flags.
# (used standardized name CFLAFS, which can be
# overridden on the make command line)
CFLAGS := -mn

# Output name flag.
CC_OUT := -o
# Compile-only flag.
CC_COMPILE_ONLY := -c
# Macro definition flag.
CC_DEFINE := -D
# Include directory flag.
CC_INCLUDE := -I

# Flags for different build configurations.
CFLAGS_DEBUG := -g -D -o-all
CFLAGS_RELEASE := -w -o
CFLAGS_LIB := -WA
CFLAGS_LIBMT := -WA
CFLAGS_DLL_DLL := -WD
CFLAGS_DLL_EXE := -WA


# C++ compiler settings.

# The compiler executable.
CXX := $(CC)

# The compiler global flags.
# (used standardized name CXXFLAGS, which can be
# overridden on the make command line)
CXXFLAGS := $(CFLAGS) -Ae -Ar

# Output name flag.
CXX_OUT := $(CC_OUT)
# Compile-only flag.
CXX_COMPILE_ONLY := $(CC_COMPILE_ONLY)
# Macro definition flag.
CXX_DEFINE := $(CC_DEFINE)
# Include directory flag.
CXX_INCLUDE := $(CC_INCLUDE)

# Flags for different build configurations.
CXXFLAGS_DEBUG := $(CFLAGS_DEBUG)
CXXFLAGS_RELEASE := $(CFLAGS_RELEASE)
CXXFLAGS_LIB := $(CFLAGS_LIB)
CXXFLAGS_LIBMT := $(CFLAGS_LIBMT)
CXXFLAGS_DLL_DLL := $(CFLAGS_DLL_DLL)
CXXFLAGS_DLL_EXE := $(CFLAGS_DLL_EXE)


# Resource compiler settings.

# The compiler executable.
RC := rcc

# Suffix of compiled resource files.
# (cannot be empty, if RC defined)
RES_SFX := res

# The compiler global flags.
# (used standardized name RCFLAGS, which can be
# overridden on the make command line)
RCFLAGS := -r -32

# Output name flag.
RC_OUT := -o

# Macro definition flag.
RC_DEFINE := -D
# Include directory flag.
RC_INCLUDE := -I


##########################
#     Linker options     #
##########################

# The linker global flags.
# (used standardized name LDFLAGS, which can be
# overridden on the make command line)
LDFLAGS := -L/nologo -L/nomap

# Suffix of object libraries.
# (cannot be empty)
LIB_SFX := lib


# C++ linker settings.

# The linker executable.
LNKC := $(CXX)

# The linker global flags.
# (includes standard name LDFLAGS, which can be
# overridden on the make command line)
LNKC_FLAGS := $(LDFLAGS)

# Output name flag.
LNKC_OUT := $(CXX_OUT)

# Flags for different build configurations.
LNKC_FLAGS_DEBUG := -L/debug
LNKC_FLAGS_RELEASE :=

LNKC_LIB_SFX := .$(LIB_SFX)


# C++ librarian compiler settings.

# The librarian executable.
LIBC := dmlib

# The librarian global flags.
LIBC_FLAGS := -c

# Output name flag.
LIBC_OUT :=


# C++ dynamic library linker settings.

# The linker executable.
DLLC := $(LNKC)

# The linker global flags.
# (includes standard name LDFLAGS, which can be
# overridden on the make command line)
DLLC_FLAGS := $(LDFLAGS) -L/implib
# -L/information
# -mn -WD kernel32.lib
# -L/dll

# Output name flag.
DLLC_OUT := $(LNKC_OUT)

# Flags for different build configurations.
DLLC_FLAGS_DEBUG := $(LNKC_FLAGS_DEBUG)
DLLC_FLAGS_RELEASE := $(LNKC_FLAGS_RELEASE)

# Special options, which are expanded at-the-place.
# DLLC_FLAGS_OPTIONS = -L/map=$$(@:.dll=.map)


# Tool for creating the import library from the DLL.
#DLLC_IMPLIB := dmimplib /noi /p:512
# /system
#DLLC_IMPLIB_OUT := 


# Addditional clean masks for 'clean...' targets.
MXCPP_CLEAN_MASK = *.bak
MXCPP_CLEAN_MASK_DEBUG = 
MXCPP_CLEAN_MASK_TEST = 
MXCPP_CLEAN_MASK_TEST_DEBUG = 

# Addditional clean masks for 'cleanall...' targets.
MXCPP_CLEANALL_MASK = *.map
MXCPP_CLEANALL_MASK_DLL = $(2:.dll=.lib) $(2:.dll=.map)
MXCPP_CLEANALL_MASK_DLL_DEBUG = 


# Include parent definitions.
include ../system.ini

# EOF #

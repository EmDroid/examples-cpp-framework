##
# @file
#
# Makefile for the Demo C++ Framework project
#     - Microsoft Visual C++ 6.0 compiler (definitions).
#
# @author Emil Maskovsky
#


############################
#     Compiler options     #
############################

# Suffix of object file names.
# (cannot be empty)
OBJ_SFX := obj


# C++ compiler settings.

# The compiler executable.
CXX := cl

# The compiler global flags.
# (used standardized name CXXFLAGS, which can be
# overridden on the make command line)
CXXFLAGS := -nologo -GF -EHsc -GR

# Output name flag.
CXX_OUT := -Fo
# Compile-only flag.
CXX_COMPILE_ONLY := -c
# Macro definition flag.
CXX_DEFINE := -D
# Include directory flag.
CXX_INCLUDE := -I

# Flags for different build configurations.
CXXFLAGS_DEBUG := -W4 -Od $(CXXFLAGS_DEBUG_EXTRA)
CXXFLAGS_RELEASE := -W3 -O2
CXXFLAGS_LIB_DEBUG := $(CXXFLAGS_LIB_RUNTIME)d
CXXFLAGS_LIB_RELEASE := $(CXXFLAGS_LIB_RUNTIME)
CXXFLAGS_LIBMT_DEBUG := $(CXXFLAGS_LIBMT_RUNTIME)d
CXXFLAGS_LIBMT_RELEASE := $(CXXFLAGS_LIBMT_RUNTIME)
CXXFLAGS_DLL_DEBUG := -MDd
CXXFLAGS_DLL_RELEASE := -MD

# Special options, which are expanded at-the-place.
CXXFLAGS_OPTIONS = -Fd$(CURDIR)\$$(@D)\$(CXXFLAGS_VCDB_NAME).pdb


# Resource compiler settings.

# The compiler executable.
RC := rc

# Suffix of compiled resource files.
# (cannot be empty, if RC defined)
RES_SFX := res

# The compiler global flags.
# (used standardized name RCFLAGS, which can be
# overridden on the make command line)
RCFLAGS := /n /r

# Output name flag.
RC_OUT := /fo

# Macro definition flag.
RC_DEFINE := /d
# Include directory flag.
RC_INCLUDE := /i


##########################
#     Linker options     #
##########################

# The linker global flags.
# (used standardized name LDFLAGS, which can be
# overridden on the make command line)
LDFLAGS := /nologo /subsystem:console $(LDFLAGS_TARGET)

# Suffix of object libraries.
# (cannot be empty)
LIB_SFX := lib


# C++ linker settings.

# The linker executable.
LNKC := link

# The linker global flags.
# (includes standard name LDFLAGS, which can be
# overridden on the make command line)
LNKC_FLAGS := $(LDFLAGS) user32.lib

# Output name flag.
LNKC_OUT := /out:

# Flags for different build configurations.
LNKC_FLAGS_DEBUG := /debug /opt:noref
LNKC_FLAGS_RELEASE := /opt:ref

LNKC_LIB_SFX := .$(LIB_SFX)


# C++ librarian compiler settings.

# The librarian executable.
LIBC := $(LNKC)

# The librarian global flags.
LIBC_FLAGS := /lib /nologo

# Output name flag.
LIBC_OUT := $(LNKC_OUT)


# C++ dynamic library linker settings.

# The linker executable.
DLLC := $(LNKC)

# The linker global flags.
# (includes standard name LDFLAGS, which can be
# overridden on the make command line)
DLLC_FLAGS := /dll $(LNKC_FLAGS)

# Output name flag.
DLLC_OUT := $(LNKC_OUT)

# Flags for different build configurations.
DLLC_FLAGS_DEBUG := $(LNKC_FLAGS_DEBUG)
DLLC_FLAGS_RELEASE := $(LNKC_FLAGS_RELEASE)


# Addditional clean masks for 'clean...' targets.
MXCPP_CLEAN_MASK = $(1)*.sbr
MXCPP_CLEAN_MASK_DEBUG = $(1)$(CFLAGS_VCDB_NAME).pdb $(1)$(CFLAGS_VCDB_NAME).idb
MXCPP_CLEAN_MASK_TEST = $(1)*.sbr
MXCPP_CLEAN_MASK_TEST_DEBUG = $(1)*.pdb $(1)*.ilk $(1)$(CFLAGS_VCDB_NAME).idb

# Addditional clean masks for 'cleanall...' targets.
MXCPP_CLEANALL_MASK_DLL = $(2:.dll=.lib) $(2:.dll=.exp)
MXCPP_CLEANALL_MASK_DLL_DEBUG = $(2:.dll=.pdb) $(2:.dll=.ilk)

# EOF #

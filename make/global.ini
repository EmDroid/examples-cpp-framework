##
# @file
#
# Makefile for the Demo C++ Framework project - Global makefile (definitions).
#
# @author Emil Maskovsky
#


# Uncomment following line, if you wish to debug the build make system.
# The MXCPP_MAKE_DEBUG can also be set on the make command line.
# MXCPP_MAKE_DEBUG := 1

# Allow the value '0' for disabling the debug.
# 'override' directive for working even for make command line.
override MXCPP_MAKE_DEBUG := $(filter-out 0,$(MXCPP_MAKE_DEBUG))

# Root of makefiles.
MXCPP_MAKEFILE_ROOT := $(dir $(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST)))
$(if $(strip $(MXCPP_MAKE_DEBUG)),$(warning MXCPP_MAKEFILE_ROOT: $(MXCPP_MAKEFILE_ROOT)))

# Version of the library.
include $(MXCPP_MAKEFILE_ROOT)version.ini

# The library configuration suffix.
MXCPP_CONFIG_SUFFIX := mx
# The library project name.
MXCPP_LIBRARY_NAME := $(MXCPP_CONFIG_SUFFIX)cpp


# Source files list.
MXCPP_SRC_LIST =	\
LibMain.cpp	\
Debug.cpp	\
Memory.cpp	\
new.cpp	\
OutOfMem.cpp	\
Class.cpp	\
Except.cpp	\
Log.cpp	\
LogHndlr.cpp	\
LogStrm.cpp	\
LogStdE.cpp	\
LogStd.cpp	\
Stream.cpp	\
FileStrm.cpp	\
StdStrm.cpp	\
App/App.cpp	\
System/Error.cpp	\
$(MXCPP_SRC_LIST_PLATFORM)

# Resource files list.
MXCPP_RES_LIST =	\
$(MXCPP_RES_LIST_PLATFORM)

# Tests list.
MXCPP_TEST_LIST =	\
Except.cpp	\
Memory.cpp	\
$(MXCPP_TEST_LIST_PLATFORM)


# Main source directory.
MXCPP_SRC_ROOT := $(MXCPP_PROJECT_ROOT)src/

# Main include directory.
MXCPP_INCLUDE_ROOT := $(MXCPP_PROJECT_ROOT)inc

# Main resource directory.
MXCPP_RES_ROOT := $(MXCPP_SRC_ROOT)res/

# Main test directory.
MXCPP_TEST_ROOT := $(MXCPP_PROJECT_ROOT)tests/


# Directory of dependencies.
# (relative to make directory)
MXCPP_DEP_DIR := /dep

# Suffix of dependencies.
MXCPP_DEP_SFX := d


# Library main build types.
MXCPP_TARGET_TYPE_SHARE := LIB LIBMT DLL

# Library build subtypes.
MXCPP_TARGET_SUBTYPE_CHARTYPE := ANSI UNICODE
MXCPP_TARGET_SUBTYPE_DBGINFO := DEBUG RELEASE


# DLL configuration of libraries.
MXCPP_DLLCONFIG_DLL := DLL

# Modifiers for different main build types.
MXCPP_MOD_LIB := 
MXCPP_MOD_LIBMT := _mt
MXCPP_MOD_DLL := _dll

# Modifiers for different build subtypes.
MXCPP_MOD_ANSI := 
MXCPP_MOD_UNICODE := u
MXCPP_MOD_RELEASE := 
MXCPP_MOD_DEBUG := d


# Construct library name for different build types.
MXCPP_LIB_CONSTRUCT_NAME = $(MXCPP_LIBRARY_NAME)$(1)
MXCPP_LIBMT_CONSTRUCT_NAME = $(MXCPP_LIBRARY_NAME)mt$(1)
MXCPP_DLL_CONSTRUCT_NAME = $(MXCPP_LIBRARY_NAME)$(MXCPP_LIBRARY_VERSION_MAJOR)$(MXCPP_LIBRARY_VERSION_MINOR)$(1)
MXCPP_LIB_CONSTRUCT_FULLNAME = $(LIB_PFX)$(call MXCPP_LIB_CONSTRUCT_NAME,$(1)).$(LIB_SFX)
MXCPP_LIBMT_CONSTRUCT_FULLNAME = $(LIB_PFX)$(call MXCPP_LIBMT_CONSTRUCT_NAME,$(1)).$(LIB_SFX)
MXCPP_DLL_CONSTRUCT_FULLNAME_SIMPLE = $(DLL_PFX)$(call MXCPP_DLL_CONSTRUCT_NAME,$(1)).$(DLL_SFX)
MXCPP_DLL_CONSTRUCT_FULLNAME = $(call MXCPP_DLL_CONSTRUCT_FULLNAME_SIMPLE,$(1))$(if $(strip $(LN)),.$(MXCPP_LIBRARY_VERSION_MAJOR).$(MXCPP_LIBRARY_VERSION_MINOR).$(MXCPP_LIBRARY_VERSION_INTERFACE).$(MXCPP_LIBRARY_VERSION_BUILD))


MXCPP_LIBS :=	\
$(MXCPP_LIBS_PLATFORM)


# Name of the response file.
MXCPP_RESPONSE_FILE := response.rsp

# List of all compilers.
#
# Used to automatic creation of build flags.
MXCPP_COMPILERS_LIST := CXX RC LNKC_ LIBC_ DLLC_

# Flags of the C++ compiler for different configurations.
MXCPP_CXXFLAGS_LIB :=
MXCPP_CXXFLAGS_LIBMT := $(CXX_DEFINE)MT
MXCPP_CXXFLAGS_DLL := $(CXX_DEFINE)MT

MXCPP_CXXFLAGS_DEBUG := $(CXX_DEFINE)DEBUG
MXCPP_CXXFLAGS_RELEASE :=
MXCPP_CXXFLAGS_ANSI :=
MXCPP_CXXFLAGS_UNICODE := $(CXX_DEFINE)UNICODE

# Flags of the resource compiler for different configurations.
MXCPP_RCFLAGS_DEBUG := $(RC_DEFINE)_DEBUG
MXCPP_RCFLAGS_RELEASE := $(RC_DEFINE)NDEBUG
MXCPP_RCFLAGS_ANSI :=
MXCPP_RCFLAGS_UNICODE := $(RC_DEFINE)UNICODE



# Append platform configuration flags.
# Not necessary yet.
#$(foreach compiler,$(MXCPP_COMPILERS_LIST),\
#$(foreach libtype,$(MXCPP_TARGET_TYPE_SHARE),\
#$(foreach config,$(MXCPP_TARGET_SUBTYPE_CHARTYPE) $(MXCPP_TARGET_SUBTYPE_DBGINFO),\
#	$(eval MXCPP_$(compiler)FLAGS_$(libtype)_$(config) += $(MXCPP_$(compiler)FLAGS_PLATFORM_$(libtype)_$(config))))))


# Append compiler configuration flags.
#
# This is done here, not in the sub-platform initialization files, to simplify
# the sub-platform makefiles (because it has to be done always).
$(foreach compiler,$(MXCPP_COMPILERS_LIST),\
$(foreach config,$(MXCPP_TARGET_TYPE_SHARE) $(MXCPP_TARGET_SUBTYPE_CHARTYPE) $(MXCPP_TARGET_SUBTYPE_DBGINFO),\
	$(if $(strip $($(compiler)FLAGS_$(config))),\
		$(eval MXCPP_$(compiler)FLAGS_$(config) += $($(compiler)FLAGS_$(config))))))

$(foreach compiler,$(MXCPP_COMPILERS_LIST),\
$(foreach libtype,$(MXCPP_TARGET_TYPE_SHARE),\
$(foreach config,$(MXCPP_TARGET_SUBTYPE_CHARTYPE) $(MXCPP_TARGET_SUBTYPE_DBGINFO),\
	$(if $(strip $($(compiler)FLAGS_$(libtype)_$(config))),\
		$(eval MXCPP_$(compiler)FLAGS_$(libtype)_$(config) += $($(compiler)FLAGS_$(libtype)_$(config)))))))


# The standard command for compiling source files.
#
# @param $(1) The compiler name.
# @param $(2) The source file name(s).
# @param $(3) The extra compile flags.
# @param $(4) The library configuration type.
# @param $(5) The character configuration type.
# @param $(6) The debuginfo configuration type.
MXCPP_COMPILE_STANDARD = $(MXCPP_$(1)FLAGS) $(if $(strip $(MXCPP_$(1)FLAGS_$(4))),$(MXCPP_$(1)FLAGS_$(4)) )$(if $(strip $(MXCPP_$(1)FLAGS_$(5))),$(MXCPP_$(1)FLAGS_$(5)) )$(if $(strip $(MXCPP_$(1)FLAGS_$(6))),$(MXCPP_$(1)FLAGS_$(6)) )$(if $(strip $(MXCPP_$(1)FLAGS_$(4)_$(5))),$(MXCPP_$(1)FLAGS_$(4)_$(5)) )$(if $(strip $(MXCPP_$(1)FLAGS_$(4)_$(6))),$(MXCPP_$(1)FLAGS_$(4)_$(6)) )$(if $(strip $(3)),$(3) )$(if $(strip $($(1)FLAGS_OPTIONS)),$($(1)FLAGS_OPTIONS) )$($(1)_OUT)$$(subst /,$$(PATH_SEP),$$@) $$(subst /,$$(PATH_SEP),$(2))

# The command for compiling C++ sources.
#
# @param $(1) The source file name(s).
# @param $(2) The extra compile flags.
# @param $(3) The library configuration type.
# @param $(4) The character configuration type.
# @param $(5) The debuginfo configuration type.
MXCPP_COMPILE_CXX = $(call MXCPP_COMPILE_STANDARD,CXX,$(1),$(2),$(3),$(4),$(5))

# The command for compiling resources.
#
# @param $(1) The source file name(s).
# @param $(2) The character configuration type.
# @param $(3) The debuginfo configuration type.
MXCPP_COMPILE_RC = $(call MXCPP_COMPILE_STANDARD,RC,$(1),,,$(3),$(4))


# Set the default linker build schemes.
MXCPP_BUILD_LINK_SCHEME = $(1) $(2) $(3)$(if $(strip $(4)), $(4))$(if $(strip $(5)), $(5))

# The standard command for linking.
#
# @param $(1) The linker identifier.
# @param $(2) The object files list.
# @param $(3) The resource files list.
# @param $(4) The libraries list.
# @param $(5) The library configuration type.
# @param $(6) The character configuration type.
# @param $(7) The debuginfo configuration type.
MXCPP_BUILD_LINK_STANDARD = $(call $(if $(strip $($(1)_SCHEME)),$(1)_SCHEME,MXCPP_BUILD_LINK_SCHEME),\
$(MXCPP_$(1)_FLAGS) $(if $(strip $(MXCPP_$(1)_FLAGS_$(5))),$(MXCPP_$(1)_FLAGS_$(5)) )$(if $(strip $(MXCPP_$(1)_FLAGS_$(6))),$(MXCPP_$(1)_FLAGS_$(6)) )$(if $(strip $(MXCPP_$(1)_FLAGS_$(7))),$(MXCPP_$(1)_FLAGS_$(7)) )$(if $(strip $($(1)_FLAGS_OPTIONS)),$($(1)_FLAGS_OPTIONS) ),$($(1)_OUT)$$@,$(2),$(3),$(4))

#$(if $(strip $($(1)_SCHEME)),$(call $(1)_SCHEME,$($(1)),,$(2),$(3),$(4)),\
#$(error The build scheme is not defined for the $(1) linker!))


#$($(1)) $(MXCPP_$(1)_FLAGS) $(if $(strip $(MXCPP_$(1)_FLAGS_$(5))),$(MXCPP_$(1)_FLAGS_$(5)) )$(if $(strip $(MXCPP_$(1)_FLAGS_$(6))),$(MXCPP_$(1)_FLAGS_$(6)) )$(if $(strip $($(1)_FLAGS_OPTIONS)),$($(1)_FLAGS_OPTIONS) )$($(1)_OUT)$$@ $(2)$(if $(strip $(4)), $(4))$(if $(strip $(3)), $(3)))

#$$(call DLLC_SCHEMA,$($(1)),,$(2),$(3),$(4))

# The command for building libraries.
#
# @param $(1) The object files list.
# @param $(2) The character configuration type.
# @param $(3) The debuginfo configuration type.
MXCPP_BUILD_LIB = $(MXCPP_LIBC_FLAGS) $(if $(strip $(MXCPP_LIBC_FLAGS_$(2))),$(MXCPP_LIBC_FLAGS_$(2)) )$(if $(strip $(MXCPP_LIBC_FLAGS_$(3))),$(MXCPP_LIBC_FLAGS_$(3)) )$(LIBC_OUT)$$@ $(1)

# The command for building dynamic libraries.
#
# @param $(1) The object files list.
# @param $(2) The resource files list.
# @param $(3) The libraries list.
# @param $(4) The character configuration type.
# @param $(5) The debuginfo configuration type.
MXCPP_BUILD_DLL = $(call MXCPP_BUILD_LINK_STANDARD,DLLC,$(1),$(2),$(3),,$(4),$(5))

# The command for building exeutables.
#
# @param $(1) The object files list.
# @param $(2) The resource files list.
# @param $(3) The libraries list.
# @param $(4) The library configuration type.
# @param $(5) The character configuration type.
# @param $(6) The debuginfo configuration type.
MXCPP_BUILD_EXE = $(call MXCPP_BUILD_LINK_STANDARD,LNKC,$(1),$(2),$(3),$(4),$(5),$(6))


# EOF #
